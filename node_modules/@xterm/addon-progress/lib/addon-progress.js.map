{"version":3,"file":"addon-progress.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAuB,cAAID,IAE3BD,EAAoB,cAAIC,GACzB,CATD,CASGK,YAAY,I,gDCaf,SAASC,EAAMC,GACb,IAAIC,EAAI,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAEG,SAAUD,EAAG,CACjC,MAAME,EAAIJ,EAAEK,WAAWH,GACvB,GAAIE,EAAI,IAAQ,GAAOA,EACrB,OAAQ,EAEVH,EAAQ,GAAJA,EAASG,EAAI,EACnB,CACA,OAAOH,CACT,C,wEAGA,oCAEU,KAAAK,IAAG,EACH,KAAAC,IAAM,CA+DhB,CA1DS,OAAAC,GACLC,KAAKC,aAAaF,UAClBC,KAAKE,WAAWH,SAClB,CAEO,QAAAI,CAASC,GACdJ,KAAKC,YAAcG,EAASC,OAAOC,mBAAmB,GAAGC,IACvD,IAAKA,EAAKC,WAAW,MACnB,OAAO,EAET,MAAMC,EAAQF,EAAKG,MAAM,KAEzB,GAAID,EAAMf,OAAS,EACjB,OAAO,EAEY,IAAjBe,EAAMf,QACRe,EAAME,KAAK,IAEb,MAAMC,EAAKtB,EAAMmB,EAAM,IACjBI,EAAKvB,EAAMmB,EAAM,IAEvB,OAAQG,GACN,KAAK,EACHZ,KAAKc,SAAW,CAAEC,MAAOH,EAAII,MAAO,GACpC,MACF,KAAK,EACH,GAAIH,EAAK,EAAG,OAAO,EACnBb,KAAKc,SAAW,CAAEC,MAAOH,EAAII,MAAOH,GACpC,MACF,KAAK,EACL,KAAK,EACH,GAAIA,EAAK,EAAG,OAAO,EACnBb,KAAKc,SAAW,CAAEC,MAAOH,EAAII,MAAOH,GAAMb,KAAKF,KAC/C,MACF,KAAK,EACHE,KAAKc,SAAW,CAAEC,MAAOH,EAAII,MAAOhB,KAAKF,KAG7C,OAAO,CAAI,IAGbE,KAAKE,UAAY,IAAKE,EAAiBa,MAAMC,QAAQC,YACrDnB,KAAKoB,SAAWpB,KAAKE,UAAWmB,KAClC,CAEA,YAAWP,GACT,MAAO,CAAEC,MAAOf,KAAKH,IAAKmB,MAAOhB,KAAKF,IACxC,CAEA,YAAWgB,CAASA,GACdA,EAASC,MAAQ,GAAKD,EAASC,MAAQ,EACzCO,QAAQC,KAAK,8CAGfvB,KAAKH,IAAMiB,EAASC,MACpBf,KAAKF,IAAM0B,KAAKC,IAAID,KAAKE,IAAIZ,EAASE,MAAO,GAAI,KACjDhB,KAAKE,WAAWyB,KAAK,CAAEZ,MAAOf,KAAKH,IAAKmB,MAAOhB,KAAKF,MACtD,E","sources":["webpack://ProgressAddon/webpack/universalModuleDefinition","webpack://ProgressAddon/./src/ProgressAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ProgressAddon\"] = factory();\n\telse\n\t\troot[\"ProgressAddon\"] = factory();\n})(globalThis, () => {\nreturn ","/**\n * Copyright (c) 2024 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport type { Terminal, ITerminalAddon, IDisposable } from '@xterm/xterm';\nimport type { ProgressAddon as IProgressApi, IProgressState } from '@xterm/addon-progress';\nimport type { Emitter, Event } from 'vs/base/common/event';\n\n\nconst enum ProgressType {\n  REMOVE = 0,\n  SET = 1,\n  ERROR = 2,\n  INDETERMINATE = 3,\n  PAUSE = 4\n}\n\n\n/**\n * Strict integer parsing, only decimal digits allowed.\n */\nfunction toInt(s: string): number {\n  let v = 0;\n  for (let i = 0; i < s.length; ++i) {\n    const c = s.charCodeAt(i);\n    if (c < 0x30 || 0x39 < c) {\n      return -1;\n    }\n    v = v * 10 + c - 48;\n  }\n  return v;\n}\n\n\nexport class ProgressAddon implements ITerminalAddon, IProgressApi {\n  private _seqHandler: IDisposable | undefined;\n  private _st: ProgressType = ProgressType.REMOVE;\n  private _pr = 0;\n  // HACK: This uses ! to align with the API, this should be fixed when 5283 is resolved\n  private _onChange!: Emitter<IProgressState>;\n  public onChange!: Event<IProgressState>;\n\n  public dispose(): void {\n    this._seqHandler?.dispose();\n    this._onChange?.dispose();\n  }\n\n  public activate(terminal: Terminal): void {\n    this._seqHandler = terminal.parser.registerOscHandler(9, data => {\n      if (!data.startsWith('4;')) {\n        return false;\n      }\n      const parts = data.split(';');\n\n      if (parts.length > 3) {\n        return true;  // faulty sequence, just exit\n      }\n      if (parts.length === 2) {\n        parts.push('');\n      }\n      const st = toInt(parts[1]);\n      const pr = toInt(parts[2]);\n\n      switch (st) {\n        case ProgressType.REMOVE:\n          this.progress = { state: st, value: 0 };\n          break;\n        case ProgressType.SET:\n          if (pr < 0) return true;  // faulty sequence, just exit\n          this.progress = { state: st, value: pr };\n          break;\n        case ProgressType.ERROR:\n        case ProgressType.PAUSE:\n          if (pr < 0) return true;  // faulty sequence, just exit\n          this.progress = { state: st, value: pr || this._pr };\n          break;\n        case ProgressType.INDETERMINATE:\n          this.progress = { state: st, value: this._pr };\n          break;\n      }\n      return true;\n    });\n    // FIXME: borrow emitter ctor from xterm, to be changed once #5283 is resolved\n    this._onChange = new (terminal as any)._core._onData.constructor();\n    this.onChange = this._onChange!.event;\n  }\n\n  public get progress(): IProgressState {\n    return { state: this._st, value: this._pr };\n  }\n\n  public set progress(progress: IProgressState) {\n    if (progress.state < 0 || progress.state > 4) {\n      console.warn(`progress state out of bounds, not applied`);\n      return;\n    }\n    this._st = progress.state;\n    this._pr = Math.min(Math.max(progress.value, 0), 100);\n    this._onChange?.fire({ state: this._st, value: this._pr });\n  }\n}\n"],"names":["root","factory","exports","module","define","amd","globalThis","toInt","s","v","i","length","c","charCodeAt","_st","_pr","dispose","this","_seqHandler","_onChange","activate","terminal","parser","registerOscHandler","data","startsWith","parts","split","push","st","pr","progress","state","value","_core","_onData","constructor","onChange","event","console","warn","Math","min","max","fire"],"sourceRoot":""}