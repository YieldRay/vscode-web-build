{"version":3,"file":"extension.js","mappings":"23BAgBA,oBAAyBA,GAGxBA,EAAQC,cAAcC,KACrBC,EAAOC,GAAGC,aAAiC,uBAAwB,CAClEC,OAAQC,MAAOC,EAASC,IAkD3B,SAAgCC,GAE/B,MAAMC,EAAS,IAAIR,EAAOS,wBAAwB,CACjD,IAAIT,EAAOU,sBAAsBH,KAYlC,OALCC,EAAmDG,mBAAqB,CACxEC,OACAC,OAAO,IAAIC,aAAcC,OAAOR,IAG1BC,CACR,CAhEWQ,CADYX,EAAQY,MAAMC,WASpCrB,EAAQC,cAAcC,KACrBC,EAAOmB,KAAKC,2BAA2BC,EAAU,CAChD,sBAAMC,EAAiB,MAAET,GAASU,EAASC,EAAMlB,GAChD,MAAMmB,GAAgB,IAAIC,aAAcC,OAAOd,GAGzCe,EAAY5B,EAAO6B,IAAIC,SAASjC,EAAQkC,aAAc,oBAC5DR,EAAQlB,QAAU,CACjB2B,eAAe,EACfC,mBAAoB,CAACL,IAItB,MAAMM,EAsDV,WACC,IAAIC,EAAO,GACX,MAAMC,EAAW,iEACjB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACvBF,GAAQC,EAASE,OAAOC,KAAKC,MAAsBJ,GAAhBG,KAAKE,WAEzC,OAAON,CACR,CA7DkBO,GACRC,EAAgB3C,EAAO6B,IAAIC,SAASF,EAAW,YA4CzD,IAAwBgB,EA1CpBrB,EAAQsB,KAAO,mVAQwEtB,EAAQuB,oBAAoBZ,sIAkC/FU,EA7BAnB,EA8BhBmB,EACLG,QAAQ,KAAM,SACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,QACdA,QAAQ,KAAM,UACdA,QAAQ,KAAM,4EAhCoBb,WAAeX,EAAQyB,aAAaL,sDAGtE,IAEH,EAhEA,kBAKMtB,EAAW,4BAKXT,EAAO,kB,UCdbqC,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://mermaid-chat-features/./src/extension.ts","webpack://mermaid-chat-features/external commonjs \"vscode\"","webpack://mermaid-chat-features/webpack/bootstrap","webpack://mermaid-chat-features/webpack/startup"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\n\n/**\n * View type that uniquely identifies the Mermaid chat output renderer.\n */\nconst viewType = 'vscode.chatMermaidDiagram';\n\n/**\n * Mime type used to identify Mermaid diagram data in chat output.\n */\nconst mime = 'text/vnd.mermaid';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\t// Register tools\n\tcontext.subscriptions.push(\n\t\tvscode.lm.registerTool<{ markup: string }>('renderMermaidDiagram', {\n\t\t\tinvoke: async (options, _token) => {\n\t\t\t\tconst sourceCode = options.input.markup;\n\t\t\t\treturn writeMermaidToolOutput(sourceCode);\n\t\t\t},\n\t\t})\n\t);\n\n\t// Register the chat output renderer for Mermaid diagrams.\n\t// This will be invoked with the data generated by the tools.\n\t// It can also be invoked when rendering old Mermaid diagrams in the chat history.\n\tcontext.subscriptions.push(\n\t\tvscode.chat.registerChatOutputRenderer(viewType, {\n\t\t\tasync renderChatOutput({ value }, webview, _ctx, _token) {\n\t\t\t\tconst mermaidSource = new TextDecoder().decode(value);\n\n\t\t\t\t// Set the options for the webview\n\t\t\t\tconst mediaRoot = vscode.Uri.joinPath(context.extensionUri, 'chat-webview-out');\n\t\t\t\twebview.options = {\n\t\t\t\t\tenableScripts: true,\n\t\t\t\t\tlocalResourceRoots: [mediaRoot],\n\t\t\t\t};\n\n\t\t\t\t// Set the HTML content for the webview\n\t\t\t\tconst nonce = getNonce();\n\t\t\t\tconst mermaidScript = vscode.Uri.joinPath(mediaRoot, 'index.js');\n\n\t\t\t\twebview.html = `\n\t\t\t\t\t<!DOCTYPE html>\n\t\t\t\t\t<html lang=\"en\">\n\n\t\t\t\t\t<head>\n\t\t\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t\t\t<title>Mermaid Diagram</title>\n\t\t\t\t\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none'; script-src ${webview.cspSource} 'nonce-${nonce}'; style-src 'self' 'unsafe-inline';\" />\n\t\t\t\t\t</head>\n\n\t\t\t\t\t<body>\n\t\t\t\t\t\t<pre class=\"mermaid\">\n\t\t\t\t\t\t\t${escapeHtmlText(mermaidSource)}\n\t\t\t\t\t\t</pre>\n\n\t\t\t\t\t\t<script type=\"module\" nonce=\"${nonce}\" src=\"${webview.asWebviewUri(mermaidScript)}\"></script>\n\t\t\t\t\t</body>\n\t\t\t\t\t</html>`;\n\t\t\t},\n\t\t}));\n}\n\n\nfunction writeMermaidToolOutput(sourceCode: string): vscode.LanguageModelToolResult {\n\t// Expose the source code as a tool result for the LM\n\tconst result = new vscode.LanguageModelToolResult([\n\t\tnew vscode.LanguageModelTextPart(sourceCode)\n\t]);\n\n\t// And store custom data in the tool result details to indicate that a custom renderer should be used for it.\n\t// In this case we just store the source code as binary data.\n\n\t// Add cast to use proposed API\n\t(result as vscode.ExtendedLanguageModelToolResult2).toolResultDetails2 = {\n\t\tmime,\n\t\tvalue: new TextEncoder().encode(sourceCode),\n\t};\n\n\treturn result;\n}\n\nfunction escapeHtmlText(str: string): string {\n\treturn str\n\t\t.replace(/&/g, '&amp;')\n\t\t.replace(/</g, '&lt;')\n\t\t.replace(/>/g, '&gt;')\n\t\t.replace(/\"/g, '&quot;')\n\t\t.replace(/'/g, '&#39;');\n}\n\nfunction getNonce() {\n\tlet text = '';\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\tfor (let i = 0; i < 64; i++) {\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\n\t}\n\treturn text;\n}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(256);\n"],"names":["context","subscriptions","push","vscode","lm","registerTool","invoke","async","options","_token","sourceCode","result","LanguageModelToolResult","LanguageModelTextPart","toolResultDetails2","mime","value","TextEncoder","encode","writeMermaidToolOutput","input","markup","chat","registerChatOutputRenderer","viewType","renderChatOutput","webview","_ctx","mermaidSource","TextDecoder","decode","mediaRoot","Uri","joinPath","extensionUri","enableScripts","localResourceRoots","nonce","text","possible","i","charAt","Math","floor","random","getNonce","mermaidScript","str","html","cspSource","replace","asWebviewUri","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}