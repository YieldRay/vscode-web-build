{"version":3,"file":"extensionEditingBrowserMain.js","mappings":"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","sources":["webpack://extension-editing/external commonjs \"vscode\"","webpack://extension-editing/./src/extensionEditingBrowserMain.ts","webpack://extension-editing/./src/constants.ts","webpack://extension-editing/./node_modules/jsonc-parser/lib/esm/impl/scanner.js","webpack://extension-editing/./node_modules/jsonc-parser/lib/esm/impl/parser.js","webpack://extension-editing/./node_modules/jsonc-parser/lib/esm/impl/format.js","webpack://extension-editing/./node_modules/jsonc-parser/lib/esm/impl/edit.js","webpack://extension-editing/./node_modules/jsonc-parser/lib/esm/main.js","webpack://extension-editing/./src/packageDocumentHelper.ts","webpack://extension-editing/webpack/bootstrap","webpack://extension-editing/webpack/runtime/define property getters","webpack://extension-editing/webpack/runtime/hasOwnProperty shorthand","webpack://extension-editing/webpack/runtime/make namespace object","webpack://extension-editing/webpack/startup"],"sourcesContent":["module.exports = require(\"vscode\");","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { PackageDocument } from './packageDocumentHelper';\n\nexport function activate(context: vscode.ExtensionContext) {\n\t//package.json suggestions\n\tcontext.subscriptions.push(registerPackageDocumentCompletions());\n\n}\n\nfunction registerPackageDocumentCompletions(): vscode.Disposable {\n\treturn vscode.languages.registerCompletionItemProvider({ language: 'json', pattern: '**/package.json' }, {\n\t\tprovideCompletionItems(document, position, token) {\n\t\t\treturn new PackageDocument(document).provideCompletionItems(position, token);\n\t\t}\n\t});\n\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { l10n } from 'vscode';\n\nexport const implicitActivationEvent = l10n.t(\"This activation event cannot be explicitly listed by your extension.\");\nexport const redundantImplicitActivationEvent = l10n.t(\"This activation event can be removed as VS Code generates these automatically from your package.json contribution declarations.\");\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia = false) {\n    const len = text.length;\n    let pos = 0, value = '', tokenOffset = 0, token = 16 /* SyntaxKind.Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* ScanError.None */;\n    function scanHexDigits(count, exact) {\n        let digits = 0;\n        let value = 0;\n        while (digits < count || !exact) {\n            let ch = text.charCodeAt(pos);\n            if (ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) {\n                value = value * 16 + ch - 48 /* CharacterCodes._0 */;\n            }\n            else if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {\n                value = value * 16 + ch - 65 /* CharacterCodes.A */ + 10;\n            }\n            else if (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */) {\n                value = value * 16 + ch - 97 /* CharacterCodes.a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* SyntaxKind.Unknown */;\n        scanError = 0 /* ScanError.None */;\n    }\n    function scanNumber() {\n        let start = pos;\n        if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        let end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        let result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                break;\n            }\n            const ch = text.charCodeAt(pos);\n            if (ch === 34 /* CharacterCodes.doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* CharacterCodes.backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                const ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* CharacterCodes.doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* CharacterCodes.backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* CharacterCodes.slash */:\n                        result += '/';\n                        break;\n                    case 98 /* CharacterCodes.b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* CharacterCodes.f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* CharacterCodes.n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* CharacterCodes.r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* CharacterCodes.t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* CharacterCodes.u */:\n                        const ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* ScanError.InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* ScanError.InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* ScanError.InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* ScanError.None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* SyntaxKind.EOF */;\n        }\n        let code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* SyntaxKind.Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* SyntaxKind.LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* CharacterCodes.openBrace */:\n                pos++;\n                return token = 1 /* SyntaxKind.OpenBraceToken */;\n            case 125 /* CharacterCodes.closeBrace */:\n                pos++;\n                return token = 2 /* SyntaxKind.CloseBraceToken */;\n            case 91 /* CharacterCodes.openBracket */:\n                pos++;\n                return token = 3 /* SyntaxKind.OpenBracketToken */;\n            case 93 /* CharacterCodes.closeBracket */:\n                pos++;\n                return token = 4 /* SyntaxKind.CloseBracketToken */;\n            case 58 /* CharacterCodes.colon */:\n                pos++;\n                return token = 6 /* SyntaxKind.ColonToken */;\n            case 44 /* CharacterCodes.comma */:\n                pos++;\n                return token = 5 /* SyntaxKind.CommaToken */;\n            // strings\n            case 34 /* CharacterCodes.doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* SyntaxKind.StringLiteral */;\n            // comments\n            case 47 /* CharacterCodes.slash */:\n                const start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* SyntaxKind.LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {\n                    pos += 2;\n                    const safeLength = len - 1; // For lookahead.\n                    let commentClosed = false;\n                    while (pos < safeLength) {\n                        const ch = text.charCodeAt(pos);\n                        if (ch === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* ScanError.UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* SyntaxKind.BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n            // numbers\n            case 45 /* CharacterCodes.minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* CharacterCodes._0 */:\n            case 49 /* CharacterCodes._1 */:\n            case 50 /* CharacterCodes._2 */:\n            case 51 /* CharacterCodes._3 */:\n            case 52 /* CharacterCodes._4 */:\n            case 53 /* CharacterCodes._5 */:\n            case 54 /* CharacterCodes._6 */:\n            case 55 /* CharacterCodes._7 */:\n            case 56 /* CharacterCodes._8 */:\n            case 57 /* CharacterCodes._9 */:\n                value += scanNumber();\n                return token = 11 /* SyntaxKind.NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* SyntaxKind.TrueKeyword */;\n                        case 'false': return token = 9 /* SyntaxKind.FalseKeyword */;\n                        case 'null': return token = 7 /* SyntaxKind.NullKeyword */;\n                    }\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* CharacterCodes.closeBrace */:\n            case 93 /* CharacterCodes.closeBracket */:\n            case 123 /* CharacterCodes.openBrace */:\n            case 91 /* CharacterCodes.openBracket */:\n            case 34 /* CharacterCodes.doubleQuote */:\n            case 58 /* CharacterCodes.colon */:\n            case 44 /* CharacterCodes.comma */:\n            case 47 /* CharacterCodes.slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        let result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* SyntaxKind.LineCommentTrivia */ && result <= 15 /* SyntaxKind.Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: () => pos,\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: () => token,\n        getTokenValue: () => value,\n        getTokenOffset: () => tokenOffset,\n        getTokenLength: () => pos - tokenOffset,\n        getTokenStartLine: () => lineStartOffset,\n        getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,\n        getTokenError: () => scanError,\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* CharacterCodes.space */ || ch === 9 /* CharacterCodes.tab */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* CharacterCodes.lineFeed */ || ch === 13 /* CharacterCodes.carriageReturn */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;\n}\nvar CharacterCodes;\n(function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"lineFeed\"] = 10] = \"lineFeed\";\n    CharacterCodes[CharacterCodes[\"carriageReturn\"] = 13] = \"carriageReturn\";\n    CharacterCodes[CharacterCodes[\"space\"] = 32] = \"space\";\n    CharacterCodes[CharacterCodes[\"_0\"] = 48] = \"_0\";\n    CharacterCodes[CharacterCodes[\"_1\"] = 49] = \"_1\";\n    CharacterCodes[CharacterCodes[\"_2\"] = 50] = \"_2\";\n    CharacterCodes[CharacterCodes[\"_3\"] = 51] = \"_3\";\n    CharacterCodes[CharacterCodes[\"_4\"] = 52] = \"_4\";\n    CharacterCodes[CharacterCodes[\"_5\"] = 53] = \"_5\";\n    CharacterCodes[CharacterCodes[\"_6\"] = 54] = \"_6\";\n    CharacterCodes[CharacterCodes[\"_7\"] = 55] = \"_7\";\n    CharacterCodes[CharacterCodes[\"_8\"] = 56] = \"_8\";\n    CharacterCodes[CharacterCodes[\"_9\"] = 57] = \"_9\";\n    CharacterCodes[CharacterCodes[\"a\"] = 97] = \"a\";\n    CharacterCodes[CharacterCodes[\"b\"] = 98] = \"b\";\n    CharacterCodes[CharacterCodes[\"c\"] = 99] = \"c\";\n    CharacterCodes[CharacterCodes[\"d\"] = 100] = \"d\";\n    CharacterCodes[CharacterCodes[\"e\"] = 101] = \"e\";\n    CharacterCodes[CharacterCodes[\"f\"] = 102] = \"f\";\n    CharacterCodes[CharacterCodes[\"g\"] = 103] = \"g\";\n    CharacterCodes[CharacterCodes[\"h\"] = 104] = \"h\";\n    CharacterCodes[CharacterCodes[\"i\"] = 105] = \"i\";\n    CharacterCodes[CharacterCodes[\"j\"] = 106] = \"j\";\n    CharacterCodes[CharacterCodes[\"k\"] = 107] = \"k\";\n    CharacterCodes[CharacterCodes[\"l\"] = 108] = \"l\";\n    CharacterCodes[CharacterCodes[\"m\"] = 109] = \"m\";\n    CharacterCodes[CharacterCodes[\"n\"] = 110] = \"n\";\n    CharacterCodes[CharacterCodes[\"o\"] = 111] = \"o\";\n    CharacterCodes[CharacterCodes[\"p\"] = 112] = \"p\";\n    CharacterCodes[CharacterCodes[\"q\"] = 113] = \"q\";\n    CharacterCodes[CharacterCodes[\"r\"] = 114] = \"r\";\n    CharacterCodes[CharacterCodes[\"s\"] = 115] = \"s\";\n    CharacterCodes[CharacterCodes[\"t\"] = 116] = \"t\";\n    CharacterCodes[CharacterCodes[\"u\"] = 117] = \"u\";\n    CharacterCodes[CharacterCodes[\"v\"] = 118] = \"v\";\n    CharacterCodes[CharacterCodes[\"w\"] = 119] = \"w\";\n    CharacterCodes[CharacterCodes[\"x\"] = 120] = \"x\";\n    CharacterCodes[CharacterCodes[\"y\"] = 121] = \"y\";\n    CharacterCodes[CharacterCodes[\"z\"] = 122] = \"z\";\n    CharacterCodes[CharacterCodes[\"A\"] = 65] = \"A\";\n    CharacterCodes[CharacterCodes[\"B\"] = 66] = \"B\";\n    CharacterCodes[CharacterCodes[\"C\"] = 67] = \"C\";\n    CharacterCodes[CharacterCodes[\"D\"] = 68] = \"D\";\n    CharacterCodes[CharacterCodes[\"E\"] = 69] = \"E\";\n    CharacterCodes[CharacterCodes[\"F\"] = 70] = \"F\";\n    CharacterCodes[CharacterCodes[\"G\"] = 71] = \"G\";\n    CharacterCodes[CharacterCodes[\"H\"] = 72] = \"H\";\n    CharacterCodes[CharacterCodes[\"I\"] = 73] = \"I\";\n    CharacterCodes[CharacterCodes[\"J\"] = 74] = \"J\";\n    CharacterCodes[CharacterCodes[\"K\"] = 75] = \"K\";\n    CharacterCodes[CharacterCodes[\"L\"] = 76] = \"L\";\n    CharacterCodes[CharacterCodes[\"M\"] = 77] = \"M\";\n    CharacterCodes[CharacterCodes[\"N\"] = 78] = \"N\";\n    CharacterCodes[CharacterCodes[\"O\"] = 79] = \"O\";\n    CharacterCodes[CharacterCodes[\"P\"] = 80] = \"P\";\n    CharacterCodes[CharacterCodes[\"Q\"] = 81] = \"Q\";\n    CharacterCodes[CharacterCodes[\"R\"] = 82] = \"R\";\n    CharacterCodes[CharacterCodes[\"S\"] = 83] = \"S\";\n    CharacterCodes[CharacterCodes[\"T\"] = 84] = \"T\";\n    CharacterCodes[CharacterCodes[\"U\"] = 85] = \"U\";\n    CharacterCodes[CharacterCodes[\"V\"] = 86] = \"V\";\n    CharacterCodes[CharacterCodes[\"W\"] = 87] = \"W\";\n    CharacterCodes[CharacterCodes[\"X\"] = 88] = \"X\";\n    CharacterCodes[CharacterCodes[\"Y\"] = 89] = \"Y\";\n    CharacterCodes[CharacterCodes[\"Z\"] = 90] = \"Z\";\n    CharacterCodes[CharacterCodes[\"asterisk\"] = 42] = \"asterisk\";\n    CharacterCodes[CharacterCodes[\"backslash\"] = 92] = \"backslash\";\n    CharacterCodes[CharacterCodes[\"closeBrace\"] = 125] = \"closeBrace\";\n    CharacterCodes[CharacterCodes[\"closeBracket\"] = 93] = \"closeBracket\";\n    CharacterCodes[CharacterCodes[\"colon\"] = 58] = \"colon\";\n    CharacterCodes[CharacterCodes[\"comma\"] = 44] = \"comma\";\n    CharacterCodes[CharacterCodes[\"dot\"] = 46] = \"dot\";\n    CharacterCodes[CharacterCodes[\"doubleQuote\"] = 34] = \"doubleQuote\";\n    CharacterCodes[CharacterCodes[\"minus\"] = 45] = \"minus\";\n    CharacterCodes[CharacterCodes[\"openBrace\"] = 123] = \"openBrace\";\n    CharacterCodes[CharacterCodes[\"openBracket\"] = 91] = \"openBracket\";\n    CharacterCodes[CharacterCodes[\"plus\"] = 43] = \"plus\";\n    CharacterCodes[CharacterCodes[\"slash\"] = 47] = \"slash\";\n    CharacterCodes[CharacterCodes[\"formFeed\"] = 12] = \"formFeed\";\n    CharacterCodes[CharacterCodes[\"tab\"] = 9] = \"tab\";\n})(CharacterCodes || (CharacterCodes = {}));\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nvar ParseOptions;\n(function (ParseOptions) {\n    ParseOptions.DEFAULT = {\n        allowTrailingComma: false\n    };\n})(ParseOptions || (ParseOptions = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport function getLocation(text, position) {\n    const segments = []; // strings or numbers\n    const earlyReturnException = new Object();\n    let previousNode = undefined;\n    const previousNodeInst = {\n        value: {},\n        offset: 0,\n        length: 0,\n        type: 'object',\n        parent: undefined\n    };\n    let isAtPropertyKey = false;\n    function setPreviousNode(value, offset, length, type) {\n        previousNodeInst.value = value;\n        previousNodeInst.offset = offset;\n        previousNodeInst.length = length;\n        previousNodeInst.type = type;\n        previousNodeInst.colonOffset = undefined;\n        previousNode = previousNodeInst;\n    }\n    try {\n        visit(text, {\n            onObjectBegin: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                isAtPropertyKey = position > offset;\n                segments.push(''); // push a placeholder (will be replaced)\n            },\n            onObjectProperty: (name, offset, length) => {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(name, offset, length, 'property');\n                segments[segments.length - 1] = name;\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onObjectEnd: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onArrayBegin: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.push(0);\n            },\n            onArrayEnd: (offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                previousNode = undefined;\n                segments.pop();\n            },\n            onLiteralValue: (value, offset, length) => {\n                if (position < offset) {\n                    throw earlyReturnException;\n                }\n                setPreviousNode(value, offset, length, getNodeType(value));\n                if (position <= offset + length) {\n                    throw earlyReturnException;\n                }\n            },\n            onSeparator: (sep, offset, length) => {\n                if (position <= offset) {\n                    throw earlyReturnException;\n                }\n                if (sep === ':' && previousNode && previousNode.type === 'property') {\n                    previousNode.colonOffset = offset;\n                    isAtPropertyKey = false;\n                    previousNode = undefined;\n                }\n                else if (sep === ',') {\n                    const last = segments[segments.length - 1];\n                    if (typeof last === 'number') {\n                        segments[segments.length - 1] = last + 1;\n                    }\n                    else {\n                        isAtPropertyKey = true;\n                        segments[segments.length - 1] = '';\n                    }\n                    previousNode = undefined;\n                }\n            }\n        });\n    }\n    catch (e) {\n        if (e !== earlyReturnException) {\n            throw e;\n        }\n    }\n    return {\n        path: segments,\n        previousNode,\n        isAtPropertyKey,\n        matches: (pattern) => {\n            let k = 0;\n            for (let i = 0; k < pattern.length && i < segments.length; i++) {\n                if (pattern[k] === segments[i] || pattern[k] === '*') {\n                    k++;\n                }\n                else if (pattern[k] !== '**') {\n                    return false;\n                }\n            }\n            return k === pattern.length;\n        }\n    };\n}\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport function parse(text, errors = [], options = ParseOptions.DEFAULT) {\n    let currentProperty = null;\n    let currentParent = [];\n    const previousParents = [];\n    function onValue(value) {\n        if (Array.isArray(currentParent)) {\n            currentParent.push(value);\n        }\n        else if (currentProperty !== null) {\n            currentParent[currentProperty] = value;\n        }\n    }\n    const visitor = {\n        onObjectBegin: () => {\n            const object = {};\n            onValue(object);\n            previousParents.push(currentParent);\n            currentParent = object;\n            currentProperty = null;\n        },\n        onObjectProperty: (name) => {\n            currentProperty = name;\n        },\n        onObjectEnd: () => {\n            currentParent = previousParents.pop();\n        },\n        onArrayBegin: () => {\n            const array = [];\n            onValue(array);\n            previousParents.push(currentParent);\n            currentParent = array;\n            currentProperty = null;\n        },\n        onArrayEnd: () => {\n            currentParent = previousParents.pop();\n        },\n        onLiteralValue: onValue,\n        onError: (error, offset, length) => {\n            errors.push({ error, offset, length });\n        }\n    };\n    visit(text, visitor, options);\n    return currentParent[0];\n}\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport function parseTree(text, errors = [], options = ParseOptions.DEFAULT) {\n    let currentParent = { type: 'array', offset: -1, length: -1, children: [], parent: undefined }; // artificial root\n    function ensurePropertyComplete(endOffset) {\n        if (currentParent.type === 'property') {\n            currentParent.length = endOffset - currentParent.offset;\n            currentParent = currentParent.parent;\n        }\n    }\n    function onValue(valueNode) {\n        currentParent.children.push(valueNode);\n        return valueNode;\n    }\n    const visitor = {\n        onObjectBegin: (offset) => {\n            currentParent = onValue({ type: 'object', offset, length: -1, parent: currentParent, children: [] });\n        },\n        onObjectProperty: (name, offset, length) => {\n            currentParent = onValue({ type: 'property', offset, length: -1, parent: currentParent, children: [] });\n            currentParent.children.push({ type: 'string', value: name, offset, length, parent: currentParent });\n        },\n        onObjectEnd: (offset, length) => {\n            ensurePropertyComplete(offset + length); // in case of a missing value for a property: make sure property is complete\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onArrayBegin: (offset, length) => {\n            currentParent = onValue({ type: 'array', offset, length: -1, parent: currentParent, children: [] });\n        },\n        onArrayEnd: (offset, length) => {\n            currentParent.length = offset + length - currentParent.offset;\n            currentParent = currentParent.parent;\n            ensurePropertyComplete(offset + length);\n        },\n        onLiteralValue: (value, offset, length) => {\n            onValue({ type: getNodeType(value), offset, length, parent: currentParent, value });\n            ensurePropertyComplete(offset + length);\n        },\n        onSeparator: (sep, offset, length) => {\n            if (currentParent.type === 'property') {\n                if (sep === ':') {\n                    currentParent.colonOffset = offset;\n                }\n                else if (sep === ',') {\n                    ensurePropertyComplete(offset);\n                }\n            }\n        },\n        onError: (error, offset, length) => {\n            errors.push({ error, offset, length });\n        }\n    };\n    visit(text, visitor, options);\n    const result = currentParent.children[0];\n    if (result) {\n        delete result.parent;\n    }\n    return result;\n}\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport function findNodeAtLocation(root, path) {\n    if (!root) {\n        return undefined;\n    }\n    let node = root;\n    for (let segment of path) {\n        if (typeof segment === 'string') {\n            if (node.type !== 'object' || !Array.isArray(node.children)) {\n                return undefined;\n            }\n            let found = false;\n            for (const propertyNode of node.children) {\n                if (Array.isArray(propertyNode.children) && propertyNode.children[0].value === segment && propertyNode.children.length === 2) {\n                    node = propertyNode.children[1];\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                return undefined;\n            }\n        }\n        else {\n            const index = segment;\n            if (node.type !== 'array' || index < 0 || !Array.isArray(node.children) || index >= node.children.length) {\n                return undefined;\n            }\n            node = node.children[index];\n        }\n    }\n    return node;\n}\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport function getNodePath(node) {\n    if (!node.parent || !node.parent.children) {\n        return [];\n    }\n    const path = getNodePath(node.parent);\n    if (node.parent.type === 'property') {\n        const key = node.parent.children[0].value;\n        path.push(key);\n    }\n    else if (node.parent.type === 'array') {\n        const index = node.parent.children.indexOf(node);\n        if (index !== -1) {\n            path.push(index);\n        }\n    }\n    return path;\n}\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport function getNodeValue(node) {\n    switch (node.type) {\n        case 'array':\n            return node.children.map(getNodeValue);\n        case 'object':\n            const obj = Object.create(null);\n            for (let prop of node.children) {\n                const valueNode = prop.children[1];\n                if (valueNode) {\n                    obj[prop.children[0].value] = getNodeValue(valueNode);\n                }\n            }\n            return obj;\n        case 'null':\n        case 'string':\n        case 'number':\n        case 'boolean':\n            return node.value;\n        default:\n            return undefined;\n    }\n}\nexport function contains(node, offset, includeRightBound = false) {\n    return (offset >= node.offset && offset < (node.offset + node.length)) || includeRightBound && (offset === (node.offset + node.length));\n}\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport function findNodeAtOffset(node, offset, includeRightBound = false) {\n    if (contains(node, offset, includeRightBound)) {\n        const children = node.children;\n        if (Array.isArray(children)) {\n            for (let i = 0; i < children.length && children[i].offset <= offset; i++) {\n                const item = findNodeAtOffset(children[i], offset, includeRightBound);\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return node;\n    }\n    return undefined;\n}\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport function visit(text, visitor, options = ParseOptions.DEFAULT) {\n    const _scanner = createScanner(text, false);\n    // Important: Only pass copies of this to visitor functions to prevent accidental modification, and\n    // to not affect visitor functions which stored a reference to a previous JSONPath\n    const _jsonPath = [];\n    function toNoArgVisit(visitFunction) {\n        return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\n    }\n    function toNoArgVisitWithPath(visitFunction) {\n        return visitFunction ? () => visitFunction(_scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;\n    }\n    function toOneArgVisit(visitFunction) {\n        return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter()) : () => true;\n    }\n    function toOneArgVisitWithPath(visitFunction) {\n        return visitFunction ? (arg) => visitFunction(arg, _scanner.getTokenOffset(), _scanner.getTokenLength(), _scanner.getTokenStartLine(), _scanner.getTokenStartCharacter(), () => _jsonPath.slice()) : () => true;\n    }\n    const onObjectBegin = toNoArgVisitWithPath(visitor.onObjectBegin), onObjectProperty = toOneArgVisitWithPath(visitor.onObjectProperty), onObjectEnd = toNoArgVisit(visitor.onObjectEnd), onArrayBegin = toNoArgVisitWithPath(visitor.onArrayBegin), onArrayEnd = toNoArgVisit(visitor.onArrayEnd), onLiteralValue = toOneArgVisitWithPath(visitor.onLiteralValue), onSeparator = toOneArgVisit(visitor.onSeparator), onComment = toNoArgVisit(visitor.onComment), onError = toOneArgVisit(visitor.onError);\n    const disallowComments = options && options.disallowComments;\n    const allowTrailingComma = options && options.allowTrailingComma;\n    function scanNext() {\n        while (true) {\n            const token = _scanner.scan();\n            switch (_scanner.getTokenError()) {\n                case 4 /* ScanError.InvalidUnicode */:\n                    handleError(14 /* ParseErrorCode.InvalidUnicode */);\n                    break;\n                case 5 /* ScanError.InvalidEscapeCharacter */:\n                    handleError(15 /* ParseErrorCode.InvalidEscapeCharacter */);\n                    break;\n                case 3 /* ScanError.UnexpectedEndOfNumber */:\n                    handleError(13 /* ParseErrorCode.UnexpectedEndOfNumber */);\n                    break;\n                case 1 /* ScanError.UnexpectedEndOfComment */:\n                    if (!disallowComments) {\n                        handleError(11 /* ParseErrorCode.UnexpectedEndOfComment */);\n                    }\n                    break;\n                case 2 /* ScanError.UnexpectedEndOfString */:\n                    handleError(12 /* ParseErrorCode.UnexpectedEndOfString */);\n                    break;\n                case 6 /* ScanError.InvalidCharacter */:\n                    handleError(16 /* ParseErrorCode.InvalidCharacter */);\n                    break;\n            }\n            switch (token) {\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (disallowComments) {\n                        handleError(10 /* ParseErrorCode.InvalidCommentToken */);\n                    }\n                    else {\n                        onComment();\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    handleError(1 /* ParseErrorCode.InvalidSymbol */);\n                    break;\n                case 15 /* SyntaxKind.Trivia */:\n                case 14 /* SyntaxKind.LineBreakTrivia */:\n                    break;\n                default:\n                    return token;\n            }\n        }\n    }\n    function handleError(error, skipUntilAfter = [], skipUntil = []) {\n        onError(error);\n        if (skipUntilAfter.length + skipUntil.length > 0) {\n            let token = _scanner.getToken();\n            while (token !== 17 /* SyntaxKind.EOF */) {\n                if (skipUntilAfter.indexOf(token) !== -1) {\n                    scanNext();\n                    break;\n                }\n                else if (skipUntil.indexOf(token) !== -1) {\n                    break;\n                }\n                token = scanNext();\n            }\n        }\n    }\n    function parseString(isValue) {\n        const value = _scanner.getTokenValue();\n        if (isValue) {\n            onLiteralValue(value);\n        }\n        else {\n            onObjectProperty(value);\n            // add property name afterwards\n            _jsonPath.push(value);\n        }\n        scanNext();\n        return true;\n    }\n    function parseLiteral() {\n        switch (_scanner.getToken()) {\n            case 11 /* SyntaxKind.NumericLiteral */:\n                const tokenValue = _scanner.getTokenValue();\n                let value = Number(tokenValue);\n                if (isNaN(value)) {\n                    handleError(2 /* ParseErrorCode.InvalidNumberFormat */);\n                    value = 0;\n                }\n                onLiteralValue(value);\n                break;\n            case 7 /* SyntaxKind.NullKeyword */:\n                onLiteralValue(null);\n                break;\n            case 8 /* SyntaxKind.TrueKeyword */:\n                onLiteralValue(true);\n                break;\n            case 9 /* SyntaxKind.FalseKeyword */:\n                onLiteralValue(false);\n                break;\n            default:\n                return false;\n        }\n        scanNext();\n        return true;\n    }\n    function parseProperty() {\n        if (_scanner.getToken() !== 10 /* SyntaxKind.StringLiteral */) {\n            handleError(3 /* ParseErrorCode.PropertyNameExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            return false;\n        }\n        parseString(false);\n        if (_scanner.getToken() === 6 /* SyntaxKind.ColonToken */) {\n            onSeparator(':');\n            scanNext(); // consume colon\n            if (!parseValue()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n        }\n        else {\n            handleError(5 /* ParseErrorCode.ColonExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n        }\n        _jsonPath.pop(); // remove processed property name\n        return true;\n    }\n    function parseObject() {\n        onObjectBegin();\n        scanNext(); // consume open brace\n        let needsComma = false;\n        while (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 2 /* SyntaxKind.CloseBraceToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);\n            }\n            if (!parseProperty()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [2 /* SyntaxKind.CloseBraceToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onObjectEnd();\n        if (_scanner.getToken() !== 2 /* SyntaxKind.CloseBraceToken */) {\n            handleError(7 /* ParseErrorCode.CloseBraceExpected */, [2 /* SyntaxKind.CloseBraceToken */], []);\n        }\n        else {\n            scanNext(); // consume close brace\n        }\n        return true;\n    }\n    function parseArray() {\n        onArrayBegin();\n        scanNext(); // consume open bracket\n        let isFirstElement = true;\n        let needsComma = false;\n        while (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */ && _scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n            if (_scanner.getToken() === 5 /* SyntaxKind.CommaToken */) {\n                if (!needsComma) {\n                    handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n                }\n                onSeparator(',');\n                scanNext(); // consume comma\n                if (_scanner.getToken() === 4 /* SyntaxKind.CloseBracketToken */ && allowTrailingComma) {\n                    break;\n                }\n            }\n            else if (needsComma) {\n                handleError(6 /* ParseErrorCode.CommaExpected */, [], []);\n            }\n            if (isFirstElement) {\n                _jsonPath.push(0);\n                isFirstElement = false;\n            }\n            else {\n                _jsonPath[_jsonPath.length - 1]++;\n            }\n            if (!parseValue()) {\n                handleError(4 /* ParseErrorCode.ValueExpected */, [], [4 /* SyntaxKind.CloseBracketToken */, 5 /* SyntaxKind.CommaToken */]);\n            }\n            needsComma = true;\n        }\n        onArrayEnd();\n        if (!isFirstElement) {\n            _jsonPath.pop(); // remove array index\n        }\n        if (_scanner.getToken() !== 4 /* SyntaxKind.CloseBracketToken */) {\n            handleError(8 /* ParseErrorCode.CloseBracketExpected */, [4 /* SyntaxKind.CloseBracketToken */], []);\n        }\n        else {\n            scanNext(); // consume close bracket\n        }\n        return true;\n    }\n    function parseValue() {\n        switch (_scanner.getToken()) {\n            case 3 /* SyntaxKind.OpenBracketToken */:\n                return parseArray();\n            case 1 /* SyntaxKind.OpenBraceToken */:\n                return parseObject();\n            case 10 /* SyntaxKind.StringLiteral */:\n                return parseString(true);\n            default:\n                return parseLiteral();\n        }\n    }\n    scanNext();\n    if (_scanner.getToken() === 17 /* SyntaxKind.EOF */) {\n        if (options.allowEmptyContent) {\n            return true;\n        }\n        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n        return false;\n    }\n    if (!parseValue()) {\n        handleError(4 /* ParseErrorCode.ValueExpected */, [], []);\n        return false;\n    }\n    if (_scanner.getToken() !== 17 /* SyntaxKind.EOF */) {\n        handleError(9 /* ParseErrorCode.EndOfFileExpected */, [], []);\n    }\n    return true;\n}\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport function stripComments(text, replaceCh) {\n    let _scanner = createScanner(text), parts = [], kind, offset = 0, pos;\n    do {\n        pos = _scanner.getPosition();\n        kind = _scanner.scan();\n        switch (kind) {\n            case 12 /* SyntaxKind.LineCommentTrivia */:\n            case 13 /* SyntaxKind.BlockCommentTrivia */:\n            case 17 /* SyntaxKind.EOF */:\n                if (offset !== pos) {\n                    parts.push(text.substring(offset, pos));\n                }\n                if (replaceCh !== undefined) {\n                    parts.push(_scanner.getTokenValue().replace(/[^\\r\\n]/g, replaceCh));\n                }\n                offset = _scanner.getPosition();\n                break;\n        }\n    } while (kind !== 17 /* SyntaxKind.EOF */);\n    return parts.join('');\n}\nexport function getNodeType(value) {\n    switch (typeof value) {\n        case 'boolean': return 'boolean';\n        case 'number': return 'number';\n        case 'string': return 'string';\n        case 'object': {\n            if (!value) {\n                return 'null';\n            }\n            else if (Array.isArray(value)) {\n                return 'array';\n            }\n            return 'object';\n        }\n        default: return 'null';\n    }\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nexport function format(documentText, range, options) {\n    let initialIndentLevel;\n    let formatText;\n    let formatTextStart;\n    let rangeStart;\n    let rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        let endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    const eol = getEOL(options, documentText);\n    let numberLineBreaks = 0;\n    let indentLevel = 0;\n    let indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    let scanner = createScanner(formatText, false);\n    let hasError = false;\n    function newLinesAndIndent() {\n        if (numberLineBreaks > 1) {\n            return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n        else {\n            return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n    }\n    function scanNext() {\n        let token = scanner.scan();\n        numberLineBreaks = 0;\n        while (token === 15 /* SyntaxKind.Trivia */ || token === 14 /* SyntaxKind.LineBreakTrivia */) {\n            if (token === 14 /* SyntaxKind.LineBreakTrivia */ && options.keepLines) {\n                numberLineBreaks += 1;\n            }\n            else if (token === 14 /* SyntaxKind.LineBreakTrivia */) {\n                numberLineBreaks = 1;\n            }\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* SyntaxKind.Unknown */ || scanner.getTokenError() !== 0 /* ScanError.None */;\n        return token;\n    }\n    const editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && (!range || (startOffset < rangeEnd && endOffset > rangeStart)) && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    let firstToken = scanNext();\n    if (options.keepLines && numberLineBreaks > 0) {\n        addEdit(repeat(eol, numberLineBreaks), 0, 0);\n    }\n    if (firstToken !== 17 /* SyntaxKind.EOF */) {\n        let firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        let initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* SyntaxKind.EOF */) {\n        let firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        let secondToken = scanNext();\n        let replaceContent = '';\n        let needsLineBreak = false;\n        while (numberLineBreaks === 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n            let commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            needsLineBreak = secondToken === 12 /* SyntaxKind.LineCommentTrivia */;\n            replaceContent = needsLineBreak ? newLinesAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* SyntaxKind.CloseBraceToken */) {\n            if (firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = ' ';\n            }\n        }\n        else if (secondToken === 4 /* SyntaxKind.CloseBracketToken */) {\n            if (firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = ' ';\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* SyntaxKind.OpenBracketToken */:\n                case 1 /* SyntaxKind.OpenBraceToken */:\n                    indentLevel++;\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 5 /* SyntaxKind.CommaToken */:\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                    replaceContent = newLinesAndIndent();\n                    break;\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* SyntaxKind.ColonToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 10 /* SyntaxKind.StringLiteral */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (secondToken === 6 /* SyntaxKind.ColonToken */ && !needsLineBreak) {\n                        replaceContent = '';\n                    }\n                    break;\n                case 7 /* SyntaxKind.NullKeyword */:\n                case 8 /* SyntaxKind.TrueKeyword */:\n                case 9 /* SyntaxKind.FalseKeyword */:\n                case 11 /* SyntaxKind.NumericLiteral */:\n                case 2 /* SyntaxKind.CloseBraceToken */:\n                case 4 /* SyntaxKind.CloseBracketToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        if ((secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */) && !needsLineBreak) {\n                            replaceContent = ' ';\n                        }\n                        else if (secondToken !== 5 /* SyntaxKind.CommaToken */ && secondToken !== 17 /* SyntaxKind.EOF */) {\n                            hasError = true;\n                        }\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (numberLineBreaks > 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n                replaceContent = newLinesAndIndent();\n            }\n        }\n        if (secondToken === 17 /* SyntaxKind.EOF */) {\n            if (options.keepLines && numberLineBreaks > 0) {\n                replaceContent = newLinesAndIndent();\n            }\n            else {\n                replaceContent = options.insertFinalNewline ? eol : '';\n            }\n        }\n        const secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    let result = '';\n    for (let i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    let i = 0;\n    let nChars = 0;\n    const tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        let ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { format, isEOL } from './format';\nimport { parseTree, findNodeAtLocation } from './parser';\nexport function removeProperty(text, path, options) {\n    return setProperty(text, path, void 0, options);\n}\nexport function setProperty(text, originalPath, value, options) {\n    const path = originalPath.slice();\n    const errors = [];\n    const root = parseTree(text, errors);\n    let parent = void 0;\n    let lastSegment = void 0;\n    while (path.length > 0) {\n        lastSegment = path.pop();\n        parent = findNodeAtLocation(root, path);\n        if (parent === void 0 && value !== void 0) {\n            if (typeof lastSegment === 'string') {\n                value = { [lastSegment]: value };\n            }\n            else {\n                value = [value];\n            }\n        }\n        else {\n            break;\n        }\n    }\n    if (!parent) {\n        // empty document\n        if (value === void 0) { // delete\n            throw new Error('Can not delete in empty document');\n        }\n        return withFormatting(text, { offset: root ? root.offset : 0, length: root ? root.length : 0, content: JSON.stringify(value) }, options);\n    }\n    else if (parent.type === 'object' && typeof lastSegment === 'string' && Array.isArray(parent.children)) {\n        const existing = findNodeAtLocation(parent, [lastSegment]);\n        if (existing !== void 0) {\n            if (value === void 0) { // delete\n                if (!existing.parent) {\n                    throw new Error('Malformed AST');\n                }\n                const propertyIndex = parent.children.indexOf(existing.parent);\n                let removeBegin;\n                let removeEnd = existing.parent.offset + existing.parent.length;\n                if (propertyIndex > 0) {\n                    // remove the comma of the previous node\n                    let previous = parent.children[propertyIndex - 1];\n                    removeBegin = previous.offset + previous.length;\n                }\n                else {\n                    removeBegin = parent.offset + 1;\n                    if (parent.children.length > 1) {\n                        // remove the comma of the next node\n                        let next = parent.children[1];\n                        removeEnd = next.offset;\n                    }\n                }\n                return withFormatting(text, { offset: removeBegin, length: removeEnd - removeBegin, content: '' }, options);\n            }\n            else {\n                // set value of existing property\n                return withFormatting(text, { offset: existing.offset, length: existing.length, content: JSON.stringify(value) }, options);\n            }\n        }\n        else {\n            if (value === void 0) { // delete\n                return []; // property does not exist, nothing to do\n            }\n            const newProperty = `${JSON.stringify(lastSegment)}: ${JSON.stringify(value)}`;\n            const index = options.getInsertionIndex ? options.getInsertionIndex(parent.children.map(p => p.children[0].value)) : parent.children.length;\n            let edit;\n            if (index > 0) {\n                let previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            else if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty + ',' };\n            }\n            return withFormatting(text, edit, options);\n        }\n    }\n    else if (parent.type === 'array' && typeof lastSegment === 'number' && Array.isArray(parent.children)) {\n        const insertIndex = lastSegment;\n        if (insertIndex === -1) {\n            // Insert\n            const newProperty = `${JSON.stringify(value)}`;\n            let edit;\n            if (parent.children.length === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: newProperty };\n            }\n            else {\n                const previous = parent.children[parent.children.length - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else if (value === void 0 && parent.children.length >= 0) {\n            // Removal\n            const removalIndex = lastSegment;\n            const toRemove = parent.children[removalIndex];\n            let edit;\n            if (parent.children.length === 1) {\n                // only item\n                edit = { offset: parent.offset + 1, length: parent.length - 2, content: '' };\n            }\n            else if (parent.children.length - 1 === removalIndex) {\n                // last item\n                let previous = parent.children[removalIndex - 1];\n                let offset = previous.offset + previous.length;\n                let parentEndOffset = parent.offset + parent.length;\n                edit = { offset, length: parentEndOffset - 2 - offset, content: '' };\n            }\n            else {\n                edit = { offset: toRemove.offset, length: parent.children[removalIndex + 1].offset - toRemove.offset, content: '' };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else if (value !== void 0) {\n            let edit;\n            const newProperty = `${JSON.stringify(value)}`;\n            if (!options.isArrayInsertion && parent.children.length > lastSegment) {\n                const toModify = parent.children[lastSegment];\n                edit = { offset: toModify.offset, length: toModify.length, content: newProperty };\n            }\n            else if (parent.children.length === 0 || lastSegment === 0) {\n                edit = { offset: parent.offset + 1, length: 0, content: parent.children.length === 0 ? newProperty : newProperty + ',' };\n            }\n            else {\n                const index = lastSegment > parent.children.length ? parent.children.length : lastSegment;\n                const previous = parent.children[index - 1];\n                edit = { offset: previous.offset + previous.length, length: 0, content: ',' + newProperty };\n            }\n            return withFormatting(text, edit, options);\n        }\n        else {\n            throw new Error(`Can not ${value === void 0 ? 'remove' : (options.isArrayInsertion ? 'insert' : 'modify')} Array index ${insertIndex} as length is not sufficient`);\n        }\n    }\n    else {\n        throw new Error(`Can not add ${typeof lastSegment !== 'number' ? 'index' : 'property'} to parent of type ${parent.type}`);\n    }\n}\nfunction withFormatting(text, edit, options) {\n    if (!options.formattingOptions) {\n        return [edit];\n    }\n    // apply the edit\n    let newText = applyEdit(text, edit);\n    // format the new text\n    let begin = edit.offset;\n    let end = edit.offset + edit.content.length;\n    if (edit.length === 0 || edit.content.length === 0) { // insert or remove\n        while (begin > 0 && !isEOL(newText, begin - 1)) {\n            begin--;\n        }\n        while (end < newText.length && !isEOL(newText, end)) {\n            end++;\n        }\n    }\n    const edits = format(newText, { offset: begin, length: end - begin }, { ...options.formattingOptions, keepLines: false });\n    // apply the formatting edits and track the begin and end offsets of the changes\n    for (let i = edits.length - 1; i >= 0; i--) {\n        const edit = edits[i];\n        newText = applyEdit(newText, edit);\n        begin = Math.min(begin, edit.offset);\n        end = Math.max(end, edit.offset + edit.length);\n        end += edit.content.length - edit.length;\n    }\n    // create a single edit with all changes\n    const editLength = text.length - (newText.length - end) - begin;\n    return [{ offset: begin, length: editLength, content: newText.substring(begin, end) }];\n}\nexport function applyEdit(text, edit) {\n    return text.substring(0, edit.offset) + edit.content + text.substring(edit.offset + edit.length);\n}\nexport function isWS(text, offset) {\n    return '\\r\\n \\t'.indexOf(text.charAt(offset)) !== -1;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format';\nimport * as edit from './impl/edit';\nimport * as scanner from './impl/scanner';\nimport * as parser from './impl/parser';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport const createScanner = scanner.createScanner;\nexport var ScanError;\n(function (ScanError) {\n    ScanError[ScanError[\"None\"] = 0] = \"None\";\n    ScanError[ScanError[\"UnexpectedEndOfComment\"] = 1] = \"UnexpectedEndOfComment\";\n    ScanError[ScanError[\"UnexpectedEndOfString\"] = 2] = \"UnexpectedEndOfString\";\n    ScanError[ScanError[\"UnexpectedEndOfNumber\"] = 3] = \"UnexpectedEndOfNumber\";\n    ScanError[ScanError[\"InvalidUnicode\"] = 4] = \"InvalidUnicode\";\n    ScanError[ScanError[\"InvalidEscapeCharacter\"] = 5] = \"InvalidEscapeCharacter\";\n    ScanError[ScanError[\"InvalidCharacter\"] = 6] = \"InvalidCharacter\";\n})(ScanError || (ScanError = {}));\nexport var SyntaxKind;\n(function (SyntaxKind) {\n    SyntaxKind[SyntaxKind[\"OpenBraceToken\"] = 1] = \"OpenBraceToken\";\n    SyntaxKind[SyntaxKind[\"CloseBraceToken\"] = 2] = \"CloseBraceToken\";\n    SyntaxKind[SyntaxKind[\"OpenBracketToken\"] = 3] = \"OpenBracketToken\";\n    SyntaxKind[SyntaxKind[\"CloseBracketToken\"] = 4] = \"CloseBracketToken\";\n    SyntaxKind[SyntaxKind[\"CommaToken\"] = 5] = \"CommaToken\";\n    SyntaxKind[SyntaxKind[\"ColonToken\"] = 6] = \"ColonToken\";\n    SyntaxKind[SyntaxKind[\"NullKeyword\"] = 7] = \"NullKeyword\";\n    SyntaxKind[SyntaxKind[\"TrueKeyword\"] = 8] = \"TrueKeyword\";\n    SyntaxKind[SyntaxKind[\"FalseKeyword\"] = 9] = \"FalseKeyword\";\n    SyntaxKind[SyntaxKind[\"StringLiteral\"] = 10] = \"StringLiteral\";\n    SyntaxKind[SyntaxKind[\"NumericLiteral\"] = 11] = \"NumericLiteral\";\n    SyntaxKind[SyntaxKind[\"LineCommentTrivia\"] = 12] = \"LineCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"BlockCommentTrivia\"] = 13] = \"BlockCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"LineBreakTrivia\"] = 14] = \"LineBreakTrivia\";\n    SyntaxKind[SyntaxKind[\"Trivia\"] = 15] = \"Trivia\";\n    SyntaxKind[SyntaxKind[\"Unknown\"] = 16] = \"Unknown\";\n    SyntaxKind[SyntaxKind[\"EOF\"] = 17] = \"EOF\";\n})(SyntaxKind || (SyntaxKind = {}));\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport const getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore, always check the errors list to find out if the input was valid.\n */\nexport const parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport const parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport const findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the innermost node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport const findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport const getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport const getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport const visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport const stripComments = parser.stripComments;\nexport var ParseErrorCode;\n(function (ParseErrorCode) {\n    ParseErrorCode[ParseErrorCode[\"InvalidSymbol\"] = 1] = \"InvalidSymbol\";\n    ParseErrorCode[ParseErrorCode[\"InvalidNumberFormat\"] = 2] = \"InvalidNumberFormat\";\n    ParseErrorCode[ParseErrorCode[\"PropertyNameExpected\"] = 3] = \"PropertyNameExpected\";\n    ParseErrorCode[ParseErrorCode[\"ValueExpected\"] = 4] = \"ValueExpected\";\n    ParseErrorCode[ParseErrorCode[\"ColonExpected\"] = 5] = \"ColonExpected\";\n    ParseErrorCode[ParseErrorCode[\"CommaExpected\"] = 6] = \"CommaExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBraceExpected\"] = 7] = \"CloseBraceExpected\";\n    ParseErrorCode[ParseErrorCode[\"CloseBracketExpected\"] = 8] = \"CloseBracketExpected\";\n    ParseErrorCode[ParseErrorCode[\"EndOfFileExpected\"] = 9] = \"EndOfFileExpected\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCommentToken\"] = 10] = \"InvalidCommentToken\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfComment\"] = 11] = \"UnexpectedEndOfComment\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfString\"] = 12] = \"UnexpectedEndOfString\";\n    ParseErrorCode[ParseErrorCode[\"UnexpectedEndOfNumber\"] = 13] = \"UnexpectedEndOfNumber\";\n    ParseErrorCode[ParseErrorCode[\"InvalidUnicode\"] = 14] = \"InvalidUnicode\";\n    ParseErrorCode[ParseErrorCode[\"InvalidEscapeCharacter\"] = 15] = \"InvalidEscapeCharacter\";\n    ParseErrorCode[ParseErrorCode[\"InvalidCharacter\"] = 16] = \"InvalidCharacter\";\n})(ParseErrorCode || (ParseErrorCode = {}));\nexport function printParseErrorCode(code) {\n    switch (code) {\n        case 1 /* ParseErrorCode.InvalidSymbol */: return 'InvalidSymbol';\n        case 2 /* ParseErrorCode.InvalidNumberFormat */: return 'InvalidNumberFormat';\n        case 3 /* ParseErrorCode.PropertyNameExpected */: return 'PropertyNameExpected';\n        case 4 /* ParseErrorCode.ValueExpected */: return 'ValueExpected';\n        case 5 /* ParseErrorCode.ColonExpected */: return 'ColonExpected';\n        case 6 /* ParseErrorCode.CommaExpected */: return 'CommaExpected';\n        case 7 /* ParseErrorCode.CloseBraceExpected */: return 'CloseBraceExpected';\n        case 8 /* ParseErrorCode.CloseBracketExpected */: return 'CloseBracketExpected';\n        case 9 /* ParseErrorCode.EndOfFileExpected */: return 'EndOfFileExpected';\n        case 10 /* ParseErrorCode.InvalidCommentToken */: return 'InvalidCommentToken';\n        case 11 /* ParseErrorCode.UnexpectedEndOfComment */: return 'UnexpectedEndOfComment';\n        case 12 /* ParseErrorCode.UnexpectedEndOfString */: return 'UnexpectedEndOfString';\n        case 13 /* ParseErrorCode.UnexpectedEndOfNumber */: return 'UnexpectedEndOfNumber';\n        case 14 /* ParseErrorCode.InvalidUnicode */: return 'InvalidUnicode';\n        case 15 /* ParseErrorCode.InvalidEscapeCharacter */: return 'InvalidEscapeCharacter';\n        case 16 /* ParseErrorCode.InvalidCharacter */: return 'InvalidCharacter';\n    }\n    return '<unknown ParseErrorCode>';\n}\n/**\n * Computes the edit operations needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns The edit operations describing the formatting changes to the original document following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edit operations needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns The edit operations describing the changes to the original document, following the format described in {@linkcode EditResult}.\n * To apply the edit operations to the input, use {@linkcode applyEdits}.\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options);\n}\n/**\n * Applies edits to an input string.\n * @param text The input text\n * @param edits Edit operations following the format described in {@linkcode EditResult}.\n * @returns The text with the applied edits.\n * @throws An error if the edit operations are not well-formed as described in {@linkcode EditResult}.\n */\nexport function applyEdits(text, edits) {\n    let sortedEdits = edits.slice(0).sort((a, b) => {\n        const diff = a.offset - b.offset;\n        if (diff === 0) {\n            return a.length - b.length;\n        }\n        return diff;\n    });\n    let lastModifiedOffset = text.length;\n    for (let i = sortedEdits.length - 1; i >= 0; i--) {\n        let e = sortedEdits[i];\n        if (e.offset + e.length <= lastModifiedOffset) {\n            text = edit.applyEdit(text, e);\n        }\n        else {\n            throw new Error('Overlapping edit');\n        }\n        lastModifiedOffset = e.offset;\n    }\n    return text;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport { getLocation, Location } from 'jsonc-parser';\nimport { implicitActivationEvent, redundantImplicitActivationEvent } from './constants';\n\n\nexport class PackageDocument {\n\n\tconstructor(private document: vscode.TextDocument) { }\n\n\tpublic provideCompletionItems(position: vscode.Position, _token: vscode.CancellationToken): vscode.ProviderResult<vscode.CompletionItem[]> {\n\t\tconst location = getLocation(this.document.getText(), this.document.offsetAt(position));\n\n\t\tif (location.path.length >= 2 && location.path[1] === 'configurationDefaults') {\n\t\t\treturn this.provideLanguageOverridesCompletionItems(location, position);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic provideCodeActions(_range: vscode.Range, context: vscode.CodeActionContext, _token: vscode.CancellationToken): vscode.ProviderResult<vscode.CodeAction[]> {\n\t\tconst codeActions: vscode.CodeAction[] = [];\n\t\tfor (const diagnostic of context.diagnostics) {\n\t\t\tif (diagnostic.message === implicitActivationEvent || diagnostic.message === redundantImplicitActivationEvent) {\n\t\t\t\tconst codeAction = new vscode.CodeAction(vscode.l10n.t(\"Remove activation event\"), vscode.CodeActionKind.QuickFix);\n\t\t\t\tcodeAction.edit = new vscode.WorkspaceEdit();\n\t\t\t\tconst rangeForCharAfter = diagnostic.range.with(diagnostic.range.end, diagnostic.range.end.translate(0, 1));\n\t\t\t\tif (this.document.getText(rangeForCharAfter) === ',') {\n\t\t\t\t\tcodeAction.edit.delete(this.document.uri, diagnostic.range.with(undefined, diagnostic.range.end.translate(0, 1)));\n\t\t\t\t} else {\n\t\t\t\t\tcodeAction.edit.delete(this.document.uri, diagnostic.range);\n\t\t\t\t}\n\t\t\t\tcodeActions.push(codeAction);\n\t\t\t}\n\t\t}\n\t\treturn codeActions;\n\t}\n\n\tprivate provideLanguageOverridesCompletionItems(location: Location, position: vscode.Position): vscode.ProviderResult<vscode.CompletionItem[]> {\n\t\tlet range = this.getReplaceRange(location, position);\n\t\tconst text = this.document.getText(range);\n\n\t\tif (location.path.length === 2) {\n\n\t\t\tlet snippet = '\"[${1:language}]\": {\\n\\t\"$0\"\\n}';\n\n\t\t\t// Suggestion model word matching includes quotes,\n\t\t\t// hence exclude the starting quote from the snippet and the range\n\t\t\t// ending quote gets replaced\n\t\t\tif (text && text.startsWith('\"')) {\n\t\t\t\trange = new vscode.Range(new vscode.Position(range.start.line, range.start.character + 1), range.end);\n\t\t\t\tsnippet = snippet.substring(1);\n\t\t\t}\n\n\t\t\treturn Promise.resolve([this.newSnippetCompletionItem({\n\t\t\t\tlabel: vscode.l10n.t(\"Language specific editor settings\"),\n\t\t\t\tdocumentation: vscode.l10n.t(\"Override editor settings for language\"),\n\t\t\t\tsnippet,\n\t\t\t\trange\n\t\t\t})]);\n\t\t}\n\n\t\tif (location.path.length === 3 && location.previousNode && typeof location.previousNode.value === 'string' && location.previousNode.value.startsWith('[')) {\n\n\t\t\t// Suggestion model word matching includes starting quote and open sqaure bracket\n\t\t\t// Hence exclude them from the proposal range\n\t\t\trange = new vscode.Range(new vscode.Position(range.start.line, range.start.character + 2), range.end);\n\n\t\t\treturn vscode.languages.getLanguages().then(languages => {\n\t\t\t\treturn languages.map(l => {\n\n\t\t\t\t\t// Suggestion model word matching includes closed sqaure bracket and ending quote\n\t\t\t\t\t// Hence include them in the proposal to replace\n\t\t\t\t\treturn this.newSimpleCompletionItem(l, range, '', l + ']\"');\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn Promise.resolve([]);\n\t}\n\n\tprivate getReplaceRange(location: Location, position: vscode.Position) {\n\t\tconst node = location.previousNode;\n\t\tif (node) {\n\t\t\tconst nodeStart = this.document.positionAt(node.offset), nodeEnd = this.document.positionAt(node.offset + node.length);\n\t\t\tif (nodeStart.isBeforeOrEqual(position) && nodeEnd.isAfterOrEqual(position)) {\n\t\t\t\treturn new vscode.Range(nodeStart, nodeEnd);\n\t\t\t}\n\t\t}\n\t\treturn new vscode.Range(position, position);\n\t}\n\n\tprivate newSimpleCompletionItem(text: string, range: vscode.Range, description?: string, insertText?: string): vscode.CompletionItem {\n\t\tconst item = new vscode.CompletionItem(text);\n\t\titem.kind = vscode.CompletionItemKind.Value;\n\t\titem.detail = description;\n\t\titem.insertText = insertText ? insertText : text;\n\t\titem.range = range;\n\t\treturn item;\n\t}\n\n\tprivate newSnippetCompletionItem(o: { label: string; documentation?: string; snippet: string; range: vscode.Range }): vscode.CompletionItem {\n\t\tconst item = new vscode.CompletionItem(o.label);\n\t\titem.kind = vscode.CompletionItemKind.Value;\n\t\titem.documentation = o.documentation;\n\t\titem.insertText = new vscode.SnippetString(o.snippet);\n\t\titem.range = o.range;\n\t\treturn item;\n\t}\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(573);\n"],"names":["module","exports","require","context","subscriptions","push","vscode","languages","registerCompletionItemProvider","language","pattern","provideCompletionItems","document","position","token","PackageDocument","implicitActivationEvent","l10n","t","redundantImplicitActivationEvent","createScanner","text","ignoreTrivia","len","length","pos","value","tokenOffset","lineNumber","lineStartOffset","tokenLineStartOffset","prevTokenLineStartOffset","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","scanNext","code","isWhiteSpace","String","fromCharCode","isLineBreak","result","start","substring","ch3","scanString","safeLength","commentClosed","isDigit","end","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenStartLine","getTokenStartCharacter","getTokenError","CharacterCodes","ParseOptions","format","documentText","range","options","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","offset","isEOL","endOffset","content","i","nChars","tabSize","charAt","Math","floor","computeIndentLevel","eol","getEOL","indentValue","numberLineBreaks","indentLevel","insertSpaces","repeat","scanner","hasError","newLinesAndIndent","keepLines","editOperations","addEdit","startOffset","firstToken","firstTokenStart","firstTokenEnd","secondToken","replaceContent","needsLineBreak","insertFinalNewline","s","indexOf","parseTree","errors","DEFAULT","currentParent","type","children","parent","undefined","ensurePropertyComplete","onValue","valueNode","visit","onObjectBegin","onObjectProperty","name","onObjectEnd","onArrayBegin","onArrayEnd","onLiteralValue","getNodeType","onSeparator","sep","colonOffset","onError","error","findNodeAtLocation","root","path","node","segment","Array","isArray","found","propertyNode","index","visitor","_scanner","_jsonPath","toNoArgVisit","visitFunction","toNoArgVisitWithPath","slice","toOneArgVisit","arg","toOneArgVisitWithPath","onComment","disallowComments","allowTrailingComma","handleError","skipUntilAfter","skipUntil","parseString","isValue","parseProperty","parseValue","pop","isFirstElement","needsComma","parseArray","parseObject","tokenValue","Number","isNaN","parseLiteral","allowEmptyContent","withFormatting","edit","formattingOptions","newText","applyEdit","begin","edits","min","max","ScanError","SyntaxKind","segments","earlyReturnException","Object","previousNode","previousNodeInst","isAtPropertyKey","setPreviousNode","last","e","matches","k","currentProperty","previousParents","object","array","findNodeAtOffset","includeRightBound","contains","item","getNodePath","key","getNodeValue","map","obj","create","prop","replaceCh","kind","parts","replace","join","ParseErrorCode","printParseErrorCode","modify","originalPath","lastSegment","existing","Error","propertyIndex","removeBegin","removeEnd","previous","JSON","stringify","newProperty","getInsertionIndex","p","insertIndex","removalIndex","toRemove","isArrayInsertion","toModify","applyEdits","sortedEdits","sort","a","b","diff","lastModifiedOffset","constructor","_token","location","getLocation","this","getText","offsetAt","provideLanguageOverridesCompletionItems","provideCodeActions","_range","codeActions","diagnostic","diagnostics","message","codeAction","CodeAction","CodeActionKind","QuickFix","WorkspaceEdit","rangeForCharAfter","with","translate","delete","uri","getReplaceRange","snippet","startsWith","Range","Position","line","character","Promise","resolve","newSnippetCompletionItem","label","documentation","getLanguages","then","l","newSimpleCompletionItem","nodeStart","positionAt","nodeEnd","isBeforeOrEqual","isAfterOrEqual","description","insertText","CompletionItem","CompletionItemKind","Value","detail","o","SnippetString","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","d","definition","defineProperty","enumerable","get","prototype","hasOwnProperty","r","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}